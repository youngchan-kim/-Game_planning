게임 기획과 프로그래밍 연계 프로세스

1. 아이디어 : 모든 사람이 낼수 있다.
2. 아이템화 / 기획화
3. 업무를 분담
4. 프로그래머 입장에서 기획자는 어떻게 보이는가!
5. 기획서
   정보 전달 30%
   이해 수반 70%



관계설정
프로그래머
아트
기획

실제로 둠 오리지널은 기획자가 없었다.
프로그래머가 만들었다.

기획자가 없었지 기획은 있었다.

2006년 쯤
C9이라는 게임의 경우 기획자 없이 만든 게임
만든후 개발자 평  리니지의 기획을 그대로 가져와 만든 게임이 되었다.

이후
프로그래머 중심의 게임회사가 만들어짐
검은사막이 만들어졌다.

3. 업무를 분담
 만든다. - 프로그램 역할
 리소스 - 아트가 맡는다.
 디자인 - 기획 

기획자라면 
-작업자에게 맞춰주려는 마인드를 가져야한다.
-작업자가 다른 고민 없이 완성도 높은 결과를 낼 수있게 만들까.


게임은 프로그래머가 최종적으로 제작한다.

프로그래머 혼자 만들 수 있다 - 스타듀벨리
프로그래머가 다 할수 있다면

그게 안되기 때문에 업무 분담이 필요했다.

생각은 전달 가능하지만 - 아이디어


기획자가 아이디어 설정하는 역처럼 보이는 것은 떠넘기기 때문
아이디어 가공 후 계획을 컴펌보냄 것은 기획자가
계획을 세우는 것은 결정권자가 PD,대표
이상적인 것을 전부의 동의를 얻어서 결정 
이후 계발 진행

4. 프로그래머 입장에서 기획자는 어떻게 보이는가!
 [회사에서 떨어지는 기획자 : 아이디어 내는 사람, 기획자가 리더다.]
 기획자란 업무에 집중할 수 있도록 도와주는 역할

신규 취업과 신규 팀
합 맞추는 기간에서 시끄러움

오래된 팀
합이 이미 맞음
합 맞는 사람과 일하는게 편하다.
 
테이블이란 데이터 모델링
예로 퀘스트 시스템의 경우 기획자가 잘 알기 때문에 기초 설계 테이블을 해준다.
한국의 경우 기획자가 기초 설계 테이블을 해준다. 팀마다 다르겠지만
외국의 경우 기획자가 해주지 않는다.

기획자가 테이블 설계를 잘 알면 먹고 산다.


내 생각 정리
- 의견과 강압 및 과도한 요구 구별이 필요 
강압과 요구는 월권 : 팀간의 관계 설정이 잘못됨  
의견 : 아이디어 제시로써 필요 행위


보통의 프로그래머는
눈에 보이는 곳에 데이터를 두고 보면서.
해당 데이터가 어떻게 쓰이는지 찾아보면 프로그래밍한다.

투자를 위한 제안서는 기획서가 아니다.
컨셉 기획서, 작업 기획서

중요 : 프로그래머에게 좋은 기획서는 목표가 명확한 기획서
실체적 명확적 구체적

중요 : 불분명 , 관념적,  이중성 등등의 문제가 있다면 무조건적으로 기획자에게 물어봐야한다.

중요 : 기획자에게 물어보지 않고 혹은 빈 곳을 채워달라고 요청할 필요가 있다.
그후 게임에 문제가 있다면 욕먹음...

중요 : 기획 중 재미가 없겠다 싶을 때 임의대로 만들지 않고 의견제시를 해야한다.

필요한 정보가 없다면 요청할 것 반대로 필요 없는 정보가 있다면 뺴달라 할 필요는 없지만 
프로그래머가 물어봐야한다.


5. 기획서
정보 전달 30%를 위한 
기획서의 70%가 이해 수반이 필요하다.

정보가 제대로 전달만 된다면 70%의 길이가 짧아져도 된다.

프로그래머가 보게 되는 
기획서는 게임을 만들기 위한 이해 
필요 데이터를 뽑아내야하는 


툴이란 원하는 데이터를 뽑아 낼 수 있게 하는 도구
엔진이란 만들고 싶은 데이터를 쉽게 만들 수 있게 도와주는 라이브러리를 모아둔 소스덩어리


내가 생각하는 엔진은 유니티 언리얼이지만 사실은 툴이다. 


단순하게 본다면 
생산성이 있는 것 : 툴
생산을 위해 만든 소스 덩어리 : 엔진
이 아니다.
결국 엔진도 생산을 위해 만들었기 때문임


현재의 시점으로 본다면 유니티나 언리얼은 
툴과 엔진을 합쳤고 툴이나 엔진으로 부르지 않는다.


기획자가 기획서를 쓰는 방법
데이터가 없거나 워드, 엑셀, 파워포인트, 선형그래프가 있는 기획서 등을 볼 수 있다.

기획서
개요 : 문서의 역할과 존재이유
진행 순서 : 프로그래머의 이해를 위한 설명 : 이해만 된 것
강화 구성 : 구체적인 만들어야할 프로그래밍
테이블 구성 : 데이터가 어떻게 저장되는지

프로그래머는 기획서에서 본 로직과 데이터를 분리해야한다.
데이터 설계, 로직구현
기획서는 보통 2가지로 나뉜다.
로직 중심 기획서
데이터 중심 기획서

계발자의 기본 역량
프로그래머의 기본 역량이 아닌

하드 코딩의 문제 유지보수가 너무 힘들다.



프로그래머가 기획자로 이직하는 경우 
프로그래머 입장에서 답답해서

클리이언트는 
리소스가 필요
세워서 구현이 가능 최소한의 구현이 완료되었을때 
게임이라고 부를 수 없는 리소스의 구현

RPG에서 성장는 관념적
성장을 위해 전투가 필요
전투는 시스템
전투에 필한 것
캐릭터 몬스터 아이템

전투 시스템만으로는 성장이 아님
성장 시스템이 필요
[시스템]
1.전투 시스템
	아이템 시스템
	몬스터 시스템
	캐릭터 시스템

2. 메인 시스템
	퀘스트 시스템
	레이드 시스템
3 서브 시스템
	메인 시스템의 하위 시스템

4. 컨텐츠


[팀 관리]
다른 팀과의 관계는 팀장끼리의 관계
팀안의 관계는 팀장에 따라

신입의 경우 팀에 들어가서 맞지 않으면 3가지의 선택이 있다.
1. 반란 좋은꼴 절대 안나옴			보통 본인이 잘못됨
2. 퇴사 후 새로운 회사의 새로운 팀을 찾는다.  	본인이 잘못되었는지 팀이 잘못된건지 알 수 없음
3. 스타일에 맞춘다.				잘못 되었다 하더라도 배우는 게 남음 프로젝트 후 다른선택이 가능
이상적인 프로그래머 및 기획자 및 팀웍



내 생각 : 기획서를 많이 읽어 볼 필요가 있다.